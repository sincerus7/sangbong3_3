1. 3

2. 4

3. 4

4. 3

5. 1

6. 4

7. 2

8. 2

9. 2

10. 4

11. 3

12. 필드, 생성자, 메소드


13. public class Member {
	private String name;
	private String id;
	private String password;
	private int age;
}

14. public class Member {
	private String name;
	private String id;
	private String password;
	private int age;

	Member(String name, String id) {
		this.name = name;
		this.id = id;
	}
}

15. public class MemberService {
	
	public boolean login(String id, String password) {
		if (id.equals("hong") && password.equals("12345")) {
			return true;
		}
		else {
			return false;
		}
	}

	public void logout(String id) {
		System.out.println(id+"님이 로그아웃 되었습니다");
	}
}


16. public class PrinterExample {
    public static void main(String[] args) {
        Printer printer = new Printer();
        printer.println(10);
        printer.println(true);
        printer.println(5.7);
        printer.println("홍길동");
    }

     public class Printer {
        void println(int x) {
            System.out.println(x);
        }

        void println(boolean x) {
            System.out.println(x);
        }

        void println(double x) {
            System.out.println(x);
        }

        void println(String x) {
            System.out.println(x);
        }
    }
}

17. public class PrinterExample2 {
    public static void main(String[] args){
        Printer.println(10);
        Printer.println(true);
        Printer.println(5.7);
        Printer.println("홍길동");
    }

    public class Printer {
        public static void println(int x){
            System.out.println(x);
        }

        public static void println(boolean x){
            System.out.println(x);
        }

        public static void println(double x){
            System.out.println(x);
        }

        public static void println(String x){
            System.out.println(x);
        }
    }
}


18. public class ShopService {

    private static ShopService singleton = new ShopService();

    private ShopService(){}

    public static ShopService getInstance() {
        return singleton;
    }
}



19. public class Account {


    private int balance;

    private static final int MIN_BALANCE = 0;
    private static final int MAX_BALANCE = 1000000;
    public void setBalance(int balance) {
        if (balance < MIN_BALANCE || balance > MAX_BALANCE) {
            return;
        }
        this.balance=balance;
    }
    public int getBalance(){
        return balance;
    }
}


20.
//Account.java
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class Account {
    private String num;
    private String name;
    private int balance;

    Account(String num, String name, int balance) {
        this.num=num;
        this.name=name;
        this.balance=balance;
    }


}



//BankApplication.java
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class BankApplication {
    private Account[] ac;
    private int top;

    BankApplication() {
        ac = new Account[100];
        top = 0;
    }
    public void Create(String num, String name, int balance) {
        ac[top] = new Account(num,name,balance);
        top++;
    }

    public void List() {
        for(int i=0; i<top; i++) {
            System.out.println(String.format("%s\t\t%s\t\t%s",
                    ac[i].getNum(), ac[i].getName(), ac[i].getBalance()));
        }
    }

    public boolean Depost(String num, int money) {
        for(int i=0; i<top; i++) {
            if(ac[i].getNum().equals(num)) {
                ac[i].setBalance(ac[i].getBalance() + money);
                return true;
            }
        }
        return false;
    }

    public int Withdraw(String num, int money) { //0은 계좌 못찾음, 1은 예금액 부족, 2는 성공
        for(int i=0; i<top; i++) {
            if(ac[i].getNum().equals(num)) {
                if(ac[i].getBalance()<money) {
                    return 1;
                }
                else {
                    ac[i].setBalance(ac[i].getBalance()-money);
                    return 2;
                }
            }
        }
        return 0;
    }
}




//Main.java
import java.util.Scanner;



public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        BankApplication ba = new BankApplication();
        String num, name;
        int money;
        int i;

        while(true) {
            System.out.println("---------------------------------------------");
            System.out.println("1.계좌생성 | 2.계좌목록 | 3.예금 | 4.출금 | 5.종료");
            System.out.println("---------------------------------------------");
            System.out.print("선택> ");
            i=sc.nextInt();

            sc.nextLine();  //개행문자(\n) 제거
            if(i==1) {
                System.out.println("---------------");
                System.out.println("계좌생성");
                System.out.println("----------------");
                System.out.print("계좌번호: ");
                num=sc.nextLine();
                System.out.print("계좌주: ");
                name=sc.nextLine();
                System.out.print("초기입금액: ");
                money=sc.nextInt();

                ba.Create(num,name,money);
                System.out.println("결과: 계좌가 생성되었습니다.");
            }
            if(i==2) {
                System.out.println("---------------");
                System.out.println("계좌목록");
                System.out.println("----------------");

                ba.List();
            }
            if(i==3) {
                System.out.println("---------------");
                System.out.println("예금");
                System.out.println("----------------");
                System.out.print("계좌번호: ");
                num=sc.nextLine();
                System.out.print("예금액: ");
                money=sc.nextInt();

                ba.Depost(num, money);
            }
            if(i==4) {
                System.out.println("---------------");
                System.out.println("출금");
                System.out.println("----------------");
                System.out.print("계좌번호: ");
                num=sc.nextLine();
                System.out.print("출금액: ");
                money=sc.nextInt();

                System.out.print("결과: ");
                switch(ba.Withdraw(num,money)) {
                    case 0:
                        System.out.println("계좌를 찾을 수 없습니다.");
                        break;
                    case 1:
                        System.out.println("예금액이 부족합니다.");
                        break;
                    case 2:
                        System.out.println("출금이 성공되었습니다.");
                        break;
                    default:
                        break;
                }
            }
            if(i==5) {
                System.out.println("프로그램 종료");
                break;
            }
            System.out.println("\n");
        }
        sc.close();
    }

}